// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PickemBot.Data;

#nullable disable

namespace PickemBot.Migrations
{
    [DbContext(typeof(PickemContext))]
    [Migration("20221031142356_please.")]
    partial class please
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ChallengerPicksTeam", b =>
                {
                    b.Property<int>("AdvanceTeamsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PickedByID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdvanceTeamsID", "PickedByID");

                    b.HasIndex("PickedByID");

                    b.ToTable("ChallengerPicksTeam");
                });

            modelBuilder.Entity("PickemBot.Models.ChallengerPicks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NoWinID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UndefeatedID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("NoWinID");

                    b.HasIndex("UndefeatedID");

                    b.ToTable("ChallengerPicks");
                });

            modelBuilder.Entity("PickemBot.Models.Picker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChallengerPicksID")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ChallengerPicksID");

                    b.ToTable("Pickers");
                });

            modelBuilder.Entity("PickemBot.Models.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmoteName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ChallengerPicksTeam", b =>
                {
                    b.HasOne("PickemBot.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("AdvanceTeamsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PickemBot.Models.ChallengerPicks", null)
                        .WithMany()
                        .HasForeignKey("PickedByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PickemBot.Models.ChallengerPicks", b =>
                {
                    b.HasOne("PickemBot.Models.Team", "NoWin")
                        .WithMany()
                        .HasForeignKey("NoWinID");

                    b.HasOne("PickemBot.Models.Team", "Undefeated")
                        .WithMany()
                        .HasForeignKey("UndefeatedID");

                    b.Navigation("NoWin");

                    b.Navigation("Undefeated");
                });

            modelBuilder.Entity("PickemBot.Models.Picker", b =>
                {
                    b.HasOne("PickemBot.Models.ChallengerPicks", "ChallengerPicks")
                        .WithMany()
                        .HasForeignKey("ChallengerPicksID");

                    b.Navigation("ChallengerPicks");
                });
#pragma warning restore 612, 618
        }
    }
}
